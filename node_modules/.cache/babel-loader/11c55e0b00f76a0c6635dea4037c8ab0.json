{"remainingRequest":"D:\\Work\\Test\\Userlist\\node_modules\\babel-loader\\lib\\index.js!D:\\Work\\Test\\Userlist\\node_modules\\eslint-loader\\index.js??ref--14-0!D:\\work\\test\\Userlist\\src\\composables\\Users.js","dependencies":[{"path":"D:\\work\\test\\Userlist\\src\\composables\\Users.js","mtime":1660023398071},{"path":"D:\\work\\test\\Userlist\\babel.config.js","mtime":1660022689921},{"path":"D:\\Work\\Test\\Userlist\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1660042636222},{"path":"D:\\Work\\Test\\Userlist\\node_modules\\babel-loader\\lib\\index.js","mtime":1660042636204},{"path":"D:\\Work\\Test\\Userlist\\node_modules\\eslint-loader\\index.js","mtime":1660042641179}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/work/test/Userlist/src/composables/Users.js"],"names":["User","useRouter","ref","useUser","data","usersdata","user","router","EntireUserList","getAllData","params","get","response","value","getPageData","getEntireUserList","pageNo","page","res","length","concat","getUser","id","storeUser","post","push","name","updateUser","put","deleteUser","confirm","window","delete","alert"],"mappings":"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","sourcesContent":["import  User  from '../api/UserApi';\nimport { useRouter} from 'vue-router'\nimport { ref } from '@vue/reactivity';\n\nexport default function useUser(){\n    const data= ref([])\n    const usersdata=ref([])\n    const user= ref([])\n    const router = useRouter()\n    const EntireUserList = ref([])\n\n    const getAllData = async (params) => {\n        let response = await User.get('users',{params:params})\n        data.value = response.data;\n        usersdata.value=response.data\n    }\n    \n    \n    const getPageData = async(params)=>{\n        let response = await User.get('users',{params:params})\n        return response.data.data\n    }\n    \n    //Get all user's data from Paginated Api with recursion     \n    \n    const getEntireUserList = async (pageNo=1)=>{\n        let res = await getPageData({page:pageNo});\n        if (res.length > 0) {\n          EntireUserList.value= EntireUserList.value.concat(res)\n          res.concat(await getEntireUserList(pageNo+1));\n         \n        } else { \n            return \n        }\n        return res\n      }\n\n    const getUser = async (id) => {\n        let response = await User.get(`users/${id}`)\n        user.value = response.data.data;\n    }\n    \n    const storeUser = async (data) => {\n          await User.post(`users`,data)\n          await router.push({name: 'user.index'})\n          \n    }\n\n    const updateUser = async (id) => {\n          await User.put(`users/${id}` , user.value)\n          await router.push({name:'user.index'})\n        }\n    \n    const deleteUser = async (id) => {\n        let confirm=window.confirm('Want to delete this user ?')\n        if(confirm) { \n            await User.delete(`users/${id}`)\n            alert('Please open Network log before deleting to check the API response')\n        }\n   }\n    \n      return {\n            data,\n            user,\n            usersdata,\n            EntireUserList,\n            getAllData,\n            getUser,\n            deleteUser,\n            updateUser,\n            storeUser,\n            getEntireUserList\n      }\n  \n }\n"]}]}